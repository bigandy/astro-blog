---
import { type Item } from "@components/Blog/utils/getAllPosts";
import BlogPostHeader from "@components/Blog/BlogPostHeader.astro";
import type { Collection } from "@components/Blog/utils/getAllPosts";

interface Props {
    post: Item;
    collection?: Collection;
    postIndex: number;
}

const {
    post: { slug, data },
    collection = "blog",
    postIndex,
} = Astro.props;
const { draft, title, date } = data;
const future = new Date(date) > new Date();
const showPostNumber = !draft;

const prefix = Astro.currentLocale === 'en' ? '' : Astro.currentLocale + '/';

type TextType = { [key: string]: { draft: string, future: string } }

const text: TextType = {
  'en': {
    draft: "draft",
    future: "future",
  },
  'fr': {
    draft: "brouillon",
    future: "futur"
  }
}
const articleType = draft ? 'draft' : future ? 'future': "";

const locale = Astro.currentLocale ?? 'en';
---

<article
    class={`post-preview layout-inner`}
    data-type={articleType}
    data-draft={text[locale].draft}
    data-future={text[locale].future}
>
    <BlogPostHeader
        date={date}
        title={title}
        slug={`${prefix}${collection}/${slug}`}
        viewTransitionName={slug}
        isPreview
        postIndex={showPostNumber ? postIndex : undefined}
    />
</article>

<style>
    .post-preview {
        margin-block-end: 1rem;
        padding-block-end: 1rem;
        border-block-end: 4px solid var(--theme-divider);
        position: relative;

        a:not(:focus-visible) {
            outline: none;
        }
    }

    [data-type]:not([data-type=""]) {
        --type: attr(data-type);

        border-inline-start: 10px solid var(--border-color);
        padding-inline-start: 2rem;
        position: relative;
        transition: all 0.3s;

        &::before {
            transition: all 0.3s;
            text-transform: uppercase;
            position: absolute;
            font-size: 10px;
            left: 5px;
            top: 50%;
            content: var(--content);
            display: block;
            transform: translate(-50%, 0%) rotate(-90deg);
            transform-origin: center top;
        }

        &:hover {
            padding-inline-start: 0;
            border-inline-start: 0;

            &::before {
                opacity: 0;
            }
        }

        --border-color: if(
            style(--type: 'draft'): color-mix(
                in lch,
                var(--theme-accent),
                var(--theme-divider) 50%
            );
            style(--type: 'future'): color-mix(in lch, var(--theme-accent), red)
        );

        --content: if(style(--type : 'draft'): attr(data-draft); style(--type: 'future'): attr(data-future));
    }
</style>
