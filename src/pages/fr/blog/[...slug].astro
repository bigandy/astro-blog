---
import { getCollection, CollectionEntry } from "astro:content";

import BlogLayout from "@layouts/BlogLayout.astro";
import FullPageLayout from "@layouts/FullPageLayout.astro";
import BlogPost from "@components/Blog/BlogPost.astro";

export const prerender = true;

export const mungePosts = async (locale) => {
  const collectionFrench = await getCollection("blog-fr");
  const collectionEnglish = await getCollection("blog");

  // Loop through the English posts (I currently will always start with the English version, so it will be there)
  // If there is a french post with the same slug, replace the english with the French
  // if not then set has
  const posts = collectionEnglish.map((englishPost) => {
    const frenchPost = collectionFrench.find(
      ({ slug: frenchPostSlug }) => frenchPostSlug === englishPost.slug
    );

    const post = locale && frenchPost ? frenchPost : englishPost;

    return { post, hasTranslation: locale && frenchPost };
  });
  return posts;
};

export async function getStaticPaths() {
  const posts = await mungePosts("fr");

  return posts.map(({ post, hasTranslation }) => {
    return {
      params: {
        slug: post.slug,
      },
      props: {
        post,
        hasTranslation,
      },
    };
  });
}

// If set up correctly, The page prop now has everything that
// you need to render a single page (see next section).

interface Props {
  post: CollectionEntry<"blog">;
  hasTranslation: boolean;
}

const { post, hasTranslation } = Astro.props;
const { template, title } = post.data;
---

{
  template === "full-page" ? (
    <FullPageLayout title={title}>
      <BlogPost post={post} showBackLink={false} showDate={false} />
    </FullPageLayout>
  ) : (
    <BlogLayout title={title}>
      <BlogPost post={post} hasTranslation={hasTranslation} />
    </BlogLayout>
  )
}
<style>
  .top-nav {
    margin-block-end: 2em;
  }
  body {
    --theme-accent: var(--theme-accent-blue);
  }
</style>
