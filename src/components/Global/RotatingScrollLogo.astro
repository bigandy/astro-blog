---
const string = "andrew hudson :) â€¢ ";
const characters = string.split("");
const length = characters.length;
const charCount = length * 2;
---

<div class="ring-wrapper" style=`--char-count: ${charCount};`>
    <div class="ring" aria-hidden="true">
        {
            [...characters, ...characters].map((char, charIndex) => {
                return (
                    <span class="char" style={`--char-index: ${charIndex}`}>
                        {char}
                    </span>
                );
            })
        }

        <span class="sr-only">{string} {string}</span>
    </div>
</div>

<style>
    @layer base, ring, scroll;

    @layer scroll {
        body {
            view-timeline: --header-vtl;
        }

        @keyframes rotation {
            to {
                --degrees: calc(360 * 13deg);
            }
        }

        .ring {
            --font-size: 0.5;
        }

        .ring-wrapper {
            display: none;
            position: fixed;
            /* At the moment these are fixed. Is it possible to calculate the width of the .ring-wrapper? Currently its width is "zero" */

            /* top: 0; */
            top: calc(var(--radius) * calc(var(--parent-ring-font-size) * -2));
            right: calc(
                var(--radius) * calc(var(--parent-ring-font-size) * -2)
            );
            /* right: 0; */
            opacity: 0;
            /* translate: calc(var(--radius) * 2); */
            transition: opacity 300ms;

            a {
                scroll-behavior: smooth;
            }
        }

        @container (min-width: 1300px) {
            @media (prefers-reduced-motion: no-preference) {
                .ring-wrapper {
                    --header-height: 53px;

                    display: block;
                    animation-range:
                        var(--header-height) calc(var(--header-height) + 50px),
                        calc(var(--header-height)) 100%;
                    animation-name: fadeIn, rotation;
                    animation-fill-mode: both;
                    animation-timeline: scroll();

                    .ring {
                        --font-size: var(--parent-ring-font-size);
                    }
                }
            }
        }
    }

    @layer ring {
        .ring-wrapper {
            --inner-angle: calc((360 / var(--char-count)) * 1deg);
            --character-width: 1;
            --radius: calc((1 / 0.324699) * -2ch);
            transform: rotate(var(--degrees));
            position: fixed;
            top: 150px;
            right: 150px;
            aspect-ratio: 1;
            translate: 0% 0%;
            display: grid;
            place-items: center;
            z-index: 10;
            border-radius: 50%;
            font-weight: bold;
            display: none;
        }

        .ring {
            font-family: monospace;
            text-transform: uppercase;
            font-size: calc(var(--font-size, 1) * 2rem);
            position: relative;
        }

        .char {
            display: inline-block;
            position: absolute;
            top: 50%;
            left: 50%;
            /* color: hsl(calc(var(--char-index) * 10deg) 100% 50%); */
            transform: translate(-50%, -50%)
                rotate(calc(var(--inner-angle) * var(--char-index)))
                translateY(var(--radius));

            &:nth-child(odd) {
                color: var(--theme-accent);
            }
        }
    }

    @layer base {
        @property --degrees {
            syntax: "<angle>";
            initial-value: 0deg;
            inherits: true;
        }

        .sr-only {
            position: absolute;
            width: 1px;
            height: 1px;
            padding: 0;
            margin: -1px;
            overflow: hidden;
            clip: rect(0, 0, 0, 0);
            white-space: nowrap;
            border-width: 0;
        }

        * {
            box-sizing: border-box;
        }
    }

    @keyframes fadeIn {
        to {
            opacity: 1;
            --parent-ring-font-size: 0.75;
        }
    }

    @property --parent-ring-font-size {
        inherits: true;
        initial-value: 0.65;
        syntax: "<number>";
    }
</style>
